import { Client as PasskeyClient } from 'passkey-kit-sdk';
import { Client as FactoryClient } from 'passkey-factory-sdk';
import { Networks, xdr, Transaction, SorobanRpc } from '@stellar/stellar-sdk';
import { Buffer } from 'buffer';
import { PasskeyBase } from './base';
type GetContractIdFunction = (keyId: string) => Promise<string>;
export declare class PasskeyKit extends PasskeyBase {
    keyId: string | undefined;
    keyExpired: boolean | undefined;
    wallet: PasskeyClient | undefined;
    factory: FactoryClient;
    networkPassphrase: Networks;
    rpcUrl: string;
    rpc: SorobanRpc.Server;
    constructor(options: {
        rpcUrl: string;
        launchtubeUrl?: string;
        launchtubeJwt?: string;
        networkPassphrase: string;
        factoryContractId: string;
    });
    createWallet(name: string, user: string): Promise<{
        keyId: Buffer;
        contractId: string;
        xdr: string;
    }>;
    createKey(name: string, user: string): Promise<{
        keyId: Buffer;
        publicKey: Buffer;
    }>;
    connectWallet(opts: {
        keyId?: string | Uint8Array;
        getContractId?: GetContractIdFunction;
    }): Promise<{
        keyId: Uint8Array;
        contractId: string;
    }>;
    signAuthEntry(entry: xdr.SorobanAuthorizationEntry, options?: {
        keyId?: 'any' | string | Uint8Array;
        ledgersToLive?: number;
    }): Promise<xdr.SorobanAuthorizationEntry>;
    signAuthEntries(entries: xdr.SorobanAuthorizationEntry[], options?: {
        keyId?: 'any' | string | Uint8Array;
        ledgersToLive?: number;
    }): Promise<xdr.SorobanAuthorizationEntry[]>;
    sign(txn: Transaction | string, options?: {
        keyId?: 'any' | string | Uint8Array;
        ledgersToLive?: number;
    }): Promise<string>;
    getSuperKeyId(): Promise<string>;
    private getPublicKeyObject;
    private convertEcdsaSignatureAsnToCompact;
}
export {};
